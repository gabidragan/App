#### After each update on the models we have to update the database 
python manage.py makemigrations
## Migrations for 'blog':
## blog/migrationns/0001_initial.py
##	- Create model Post

#### To list the SQL commands generated by the migration:
python manage.py sqlmigrate blog 0001
## BEGIN;
## --
## -- Create model Post
## --
## CREATE TABLE "blog_post" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(100) NOT NULL, "content" text NOT NULL, "date_posted" datetime NOT NULL, "author_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
## CREATE INDEX "blog_post_author_id_dd7a8485" ON "blog_post" ("author_id");
## COMMIT;
python manage.py migrate
## Operations to perform:
##	 Apply all migrations: admin, auth, blog, contenttypes, sessions
## Running migrations:
##	 Applying blog.0001_initial... OK


#### Start Python shell 
python manage.py shell
>>> from blog.models import Post
>>> from django.contrib.auth.models import User

## Let's query the User table
>>> User.objects.all()
<QuerySet [<User: gabrield>, <User: TestUser>, <User: NewUser>, <User: AnotherUser>]>
>>>
>>> User.objects.first()
<User: gabrield>
>>>
>>> User.objects.last()
<User: AnotherUser>
>>>
>>> User.objects.filter(username='AnotherUser')
<QuerySet [<User: AnotherUser>]>
>>>
>>> User.objects.filter(username='AnotherUser').first()
<User: AnotherUser>
>>>
>>>
>>> user = User.objects.filter(username='gabrield').first()
>>>
>>> user
<User: gabrield>
>>>
>>> user.id
1
>>>
>>> user.pk
1
>>>
>>>
>>> user = User.objects.get(id=6)
>>>
>>> user
<User: AnotherUser>
>>>

## Now let's query the Post table
>>> Post.objects.all()
<QuerySet [<Post: First post>, <Post: Second post>, <Post: Blog 3>, <Post: blog 4>, <Post: another post updated>, <Post: Top 5 Programming Lanaguages>, <Post: Sublime Text Tips and Tricks>, <Post: Best Python IDEs>, <Post: Flask vs Django - Which Is Better?>, <Post
: You Won't Believe These Clickbait Titles!>, <Post: These Beers Will Improve Your Programming>, <Post: List of PyCon 2018 Talks>, <Post: How Dogs in the Workplace Boosts Productivity>, <Post: The Best Programming Podcasts>, <Post: Tips for Public Speaking>, <Post:
 Best Programmers Throughout History>, <Post: How To Create A YouTube Channel>, <Post: How I Record My Videos>, <Post: Python and Physics>, <Post: Just A Few More Healines Should Do It>, '...(remaining elements truncated)...']>
>>>

## To create a new Post using user
>>> post_1 = Post(title='Title of the Post1', content='Content of the post1', author=user)
>>> post_1.save()

## To create a new Post using user.id
>>> post_2 = Post(title='Title of the Post2', content='Content of the post2', author_id=user.id)
>>> post_2.save()

## Let's query a specific post:
>>> post = Post.objects.get(id=10)
>>>
>>> post.title
'Flask vs Django - Which Is Better?'
>>>
>>> post.content
'Ei dicta apeirian deterruisset eam, cu offendit invenire pri, cu possim vivendo vix? Nam nihil evertitur ad, ne vim nonumy legendos iracundia. Vix nulla dolorem intellegebat ea? Te per vide paulo dolor, eum ea erant placerat constituam? Dolores accumsan eum at.\r\
n\r\nInteresset consequuntur id vix. Eam id decore latine, iusto imperdiet ei qui. In ludus consul reformidans eam. Nec in recusabo posidonium, cu tantas volumus mnesarchum pro. Nam ut docendi evertitur, possim menandri persecuti ne sed, cum saepe ornatus delenit ...'
>>> 
>>> post.author
<User: TestUser>
>>>
>>> post.date_posted
datetime.datetime(2019, 1, 2, 5, 56, 49, 440570, tzinfo=<UTC>)
>>>

## Let's query a field from User table using an entry from Post table (email is a field of the User table)
>>> post.author.email
'email@company.com'
>>>

## To query all the fields on table Posts which match a user you can use a method .modelname_set
>>> user.post_set.all()
<QuerySet [<Post: another post updated>, <Post: Best Python IDEs>, <Post: List of PyCon 2018 Talks>, <Post: The Best Programming Podcasts>, <Post: Just A Few More Healines Should Do It>, <Post: Best Videos For Learning Python>]>
>>>

## To create a new entry on the Posts for a specific user you can use the method .create() without specifying the author
>>> user.post_set.create(title='Title of the Post3', content='Content of the post3')
<Post: Title of the Post3>
>>>

## To get the last 5 posts:
>>> Post.objects.all().order_by('-id')[:5]
<QuerySet [<Post: Title of the Post3>, <Post: My Latest Updated Post>, <Post: Top 5 YouTube Channels For Learning Programming>, <Post: Top 10 Python Tips and Tricks>, <Post: Best Videos For Learning Python>]>
>>>

## To list the title of the last 5 posts:
>>> for post in Post.objects.all().order_by('-id')[:5]:
...     print(f'{post.author} \t| {post.title}')
...
AnotherUser     | Title of the Post3
gabrield        | My Latest Updated Post
TestUser        | Top 5 YouTube Channels For Learning Programming
gabrield        | Top 10 Python Tips and Tricks
AnotherUser     | Best Videos For Learning Python
>>>



